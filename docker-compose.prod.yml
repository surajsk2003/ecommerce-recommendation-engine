services:
  # Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - web_network

  # Frontend - React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    expose:
      - "3000"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=https://api.smartcommerce.com
    restart: unless-stopped
    networks:
      - web_network

  # Backend - Django API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.prod
    expose:
      - "8000"
    environment:
      - DJANGO_SETTINGS_MODULE=ecommerce_rec.settings.production
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/ecommerce_rec
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${DJANGO_SECRET_KEY}
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - web_network
      - db_network
    volumes:
      - ./logs:/app/logs

  # Database - PostgreSQL
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ecommerce_rec
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - db_network

  # Cache - Redis
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - db_network

  # Background Workers - Celery
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.prod
    command: celery -A ecommerce_rec worker -l info --concurrency=4
    environment:
      - DJANGO_SETTINGS_MODULE=ecommerce_rec.settings.production
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@postgres:5432/ecommerce_rec
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - db_network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - monitoring_network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - monitoring_network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  web_network:
    driver: bridge
  db_network:
    driver: bridge
  monitoring_network:
    driver: bridge